<?php
namespace MfTestsResources;

use \ORM as ORM;


$config =[];


/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-08 at 15:19:13.
 */
class BaseManagerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var BaseManager
     */
    protected $object;
    
    private $careteTable ="
        CREATE TABLE IF NOT EXISTS `members` (
          `member_id` int(11) NOT NULL,
          `email` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
          `member_name` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
          `password` varchar(256) COLLATE utf8_unicode_ci NOT NULL,
          `icon_url` longtext COLLATE utf8_unicode_ci NOT NULL,
          `photo_url` longtext COLLATE utf8_unicode_ci NOT NULL,
          `is_enabled` int(11) NOT NULL,
          `created_at` datetime NOT NULL,
          `updated_at` datetime NOT NULL
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
    ";

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require_once 'vendor/autoload.php';
        include 'config/config.php';
        $app = \MfBase\MfWrapper::create($config);
        $this->object = new \MfPackage\MfBaseManager;
        ORM::for_table('members')->delete_many();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    private function createMember($params)
    {
        //ORM::get_db()->beginTransaction();
        $member = ORM::for_table('members')->create();
        $member->set($params);
        $member->set_expr('created_at', 'NOW()');
        $member->set_expr('updated_at', 'NOW()');
        $member->save();
        //ORM::get_db()->commit();
        $member = ORM::for_table('members')->find_one($member->id());
        return $member;
    }


    
    /**
     * @covers MyPackage\BaseManager::getAll
     * @todo   Implement testGetAll().
     */
    public function testGetAll()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member2 = $this->createMember(['email'=>'fugafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>0]);
        $member3 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $sql ='SELECT * FROM members WHERE is_enabled = 1';
        $params = [];
        $members = $this->object->getAll($sql,$params);
        $this->assertCount(2,$members);
    }

    /**
     * @covers MyPackage\BaseManager::getRow
     * @todo   Implement testGetRow().
     */
    public function testGetRow()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        
        $sql ='SELECT * FROM members WHERE is_enabled = 1 AND email = :email';
        $params = ['email' => $member1->email];
        $member = $this->object->getRow($sql,$params);
        $this->assertEquals($member->email, $member1->email);
        
        $member2 = $this->createMember(['email'=>'fugafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>0]);
        $sql ='SELECT * FROM members WHERE is_enabled = 0 AND email = :email';
        $params = ['email' => $member2->email];
        $member = $this->object->getRow($sql,$params);
        $this->assertEquals($member->email, $member2->email);
    }

    /**
     * @covers MyPackage\BaseManager::getOne
     * @todo   Implement testGetOne().
     */
    public function testGetOne()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        //$target = $this->object->getOne('members',$member1->member_id,'photo_url');
        $sql = 'SELECT photo_url FROM members WHERE member_name = :name';
        $params = ['name' => 'a'];
        $target = $this->object->getOne($sql,$params);
        $this->assertEquals($target['photo_url'], $member1->photo_url);
    }

    /**
     * @covers MyPackage\BaseManager::select
     * @todo   Implement testSelect().
     */
    public function testSelect()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member2 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member = $this->object->select('members',$member1->member_id);
        $this->assertEquals($member,$member1);
        $member = $this->object->select('members',$member2->member_id);
        $this->assertEquals($member,$member2);
    }

    /**
     * @covers MyPackage\BaseManager::selectAll
     * @todo   Implement testSelectAll().
     */
    public function testSelectAll()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member2 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $members = $this->object->selectAll('members');
        $this->assertCount(2,$members);
    }
    /**
     * @covers MyPackage\BaseManager::selectOne
     * @todo   Implement testSelectOne().
     */
    public function testSelectOne()
    {
        $member1 = $this->createMember(['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $target = $this->object->selectOne('members',$member1->member_id,'photo_url');
        $this->assertEquals($target, $member1->photo_url);
    }
    /**
     * @covers MyPackage\BaseManager::insert
     * @todo   Implement testInsert().
     */
    public function testInsert()
    {
        $id = $this->object->insert('members',['email'=>'hogehoge@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $this->assertNotNull($id,'Isert NG!');
        $member = $this->object->select('members',$id);
        $this->assertEquals($member->member_id, $id);
    }

    /**
     * @covers MyPackage\BaseManager::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate()
    {
        $member1 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $this->object->update('members',$member1->member_id,['email'=>'aaaa@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member = $this->object->select('members',$member1->member_id);
        $this->assertEquals($member->email, 'aaaa@hogehoge.com');
    }

    /**
     * @covers MyPackage\BaseManager::remove
     * @todo   Implement testRemove().
     */
    public function testRemove()
    {
        // 論理1
        $member1 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $this->object->remove('members',true,$member1->member_id);
        $target = $this->object->select('members',$member1->member_id);
        $this->assertNotNull($target,'Resource Couldn\'t Remove!');

        // 物理1
        $member2 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $this->object->remove('members',false,$member2->member_id);
        $target = $this->object->select('members',$member2->member_id);
        $this->assertEquals($target,false);
        
        
        
        // 物理2
        // いったん全クリア
        ORM::for_table('members')->delete_many();
        $member3 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member4 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'a','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $member5 = $this->createMember(['email'=>'pgeougafuga@hogehoge.com','member_name'=>'b','password' => 'aaa',
            'icon_url' => 'http://hoge','photo_url' => 'http://fyga','is_enabled' =>1]);
        $params =[
            'is_enabled' => 1,
            'member_name' => 'a'
        ];
        $this->object->remove('members',false,null,$params);
        $targets = $this->object->selectAll('members');
        $this->assertCount(1,$targets);
    }
}
